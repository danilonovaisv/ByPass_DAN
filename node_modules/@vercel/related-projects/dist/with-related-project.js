"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var with_related_project_exports = {};
__export(with_related_project_exports, {
  withRelatedProject: () => withRelatedProject
});
module.exports = __toCommonJS(with_related_project_exports);
var import_related_projects = require("./related-projects");
function withRelatedProject({
  projectName,
  defaultHost
}) {
  const vercelEnv = process.env.VERCEL_ENV;
  const projects = (0, import_related_projects.relatedProjects)({ noThrow: true });
  if (projects.length > 0) {
    const project = projects.find((p) => p.project.name === projectName);
    if (!project) {
      return defaultHost;
    }
    if (vercelEnv === "preview" && project.preview.branch) {
      return `https://${project.preview.branch}`;
    }
    if (vercelEnv === "production") {
      if (project.production.alias) {
        return `https://${project.production.alias}`;
      }
      if (project.production.url) {
        return `https://${project.production.url}`;
      }
    }
    return defaultHost;
  }
  return defaultHost;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  withRelatedProject
});
